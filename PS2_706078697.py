# -*- coding: utf-8 -*-
"""PS2_706078697

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NYcjhtGzfYQzTAi84oBH5yn_KjD0XmRz
"""

import pandas as pd

# Read the data from CSV
data = pd.read_csv('data.csv', error_bad_lines=False)


# Convert the date column to datetime format
data['MCALDT'] = pd.to_datetime(data['MCALDT'])

# Extract the year and month from the date column
data['Year'] = data['MCALDT'].dt.year
data['Month'] = data['MCALDT'].dt.month

# Calculate equal-weighted returns
data['Bond_Ew_Ret'] = data.groupby(['Year', 'Month'])['TMRETNUA'].transform('mean')

# Calculate value-weighted returns
data['Bond_Vw_Ret'] = data.groupby(['Year', 'Month'])['TMTOTOUT'].transform('mean')

# Calculate bond_lag_MV (Total market value the previous month)
data['Bond_lag_MV'] = data.groupby(['KYCRSPID'])['TMTOTOUT'].shift()

# Filter the data for the required date range
start_date = pd.to_datetime('1926-01-01')
end_date = pd.to_datetime('2022-12-31')
filtered_data = data[(data['MCALDT'] >= start_date) & (data['MCALDT'] <= end_date)]

# Select the required columns
Monthly_CRSP_Bonds = filtered_data[['Year', 'Month', 'Bond_lag_MV', 'Bond_Ew_Ret', 'Bond_Vw_Ret']].drop_duplicates().reset_index(drop=True)

# Display the output
print(Monthly_CRSP_Bonds)

"""2"""

crsp_stocks = pd.read_csv('CRSP_Stocks.csv', error_bad_lines=False)
def calculate_stock_returns(crsp_stocks):
    # Computes the lagged stock market capitalization, value-weighted return and equal-weight return.
    #
    # Args:
    #   CRSP_Stocks:  PERMNO | Integer
    #                 date | Date
    #                 SHRCD | Integer
    #                 EXCHCD | Integer
    #                 RET | Factor
    #                 DLRET | Factor
    #                 PRC | Numeric
    #                 SHROUT | Integer
    #
    # Returns:
    #   Monthly_CRSP_Stocks:   Year | Integer
    #                          Month | Integer
    #                          Stock_lag_MV | Numeric
    #                          Stock_Ew_Ret | Numeric
    #                          Stock_Vw_Ret | Numeric

    # Filter out unwanted samples
    restricted_universe = crsp_stocks[(crsp_stocks['shrcd'].isin([10, 11])) & 
                                      (crsp_stocks['exchcd'].isin([1, 2, 3]))]

    # Clean data, first round
    cleaned_first_round = restricted_universe.copy()
    cleaned_first_round['date'] = pd.to_datetime(cleaned_first_round['date'], format='%Y-%m-%d')
    cleaned_first_round['adj_price'] = abs(cleaned_first_round['prc'])
    cleaned_first_round['market_cap'] = cleaned_first_round['adj_price'] * cleaned_first_round['shrout']
    cleaned_first_round['adj_return'] = pd.to_numeric(cleaned_first_round['ret'], errors='coerce')
    cleaned_first_round['adj_dlreturn'] = pd.to_numeric(cleaned_first_round['dlret'], errors='coerce')

    # Clean data, second round
    cleaned_second_round = cleaned_first_round[(cleaned_first_round['adj_price'] > 0) & 
                                                (cleaned_first_round['shrout'] > 0) & 
                                                (cleaned_first_round['adj_return'].notna() | 
                                                 cleaned_first_round['adj_dlreturn'].notna())].copy()
    cleaned_second_round['return'] = cleaned_second_round.apply(lambda row: 
                                                                (1 + row['adj_return']) * 
                                                                (1 + row['adj_dlreturn']) - 1 if 
                                                                row['adj_return'] and 
                                                                row['adj_dlreturn'] else 
                                                                row['adj_return'] or 
                                                                row['adj_dlreturn'], axis=1)
    cleaned_second_round['year'] = cleaned_second_round['date'].dt.year
    cleaned_second_round['month'] = cleaned_second_round['date'].dt.month
    cleaned_second_round['lag_market_cap'] = cleaned_second_round.groupby('permno')['market_cap'].shift()

    # Calculate stock returns and group into year, month
    cleaned_shifted_df = cleaned_second_round.loc[cleaned_second_round['lag_market_cap'].notna()].copy()
    cleaned_shifted_df['weighted_return'] = cleaned_shifted_df['return'] * cleaned_shifted_df['lag_market_cap']
    stock_lag_mv = cleaned_shifted_df.groupby(['year', 'month'])['lag_market_cap'].sum().reset_index()
    stock_vw_ret = cleaned_shifted_df.groupby(['year', 'month'])['weighted_return'].sum().reset_index()

    stock_ew_ret = cleaned_shifted_df.groupby(['year', 'month'])['return'].mean().reset_index()


    # Generate output
    result = pd.merge(stock_lag_mv, stock_vw_ret, on=['year', 'month'], how='outer')
    result = pd.merge(result, stock_ew_ret, on=['year', 'month'], how='outer')
    result['vw_return'] = result['weighted_return'] / result['lag_market_cap']
    output = result[['year', 'month', 'lag_market_cap', 'return', 'vw_return']].copy()
    output.columns = ['Year', 'Month', 'Stock_lag_MV', 'Stock_Ew_Ret', 'Stock_Vw_Ret']
    return output

# Call the function and pass the DataFrame as an argument
stocks_data = calculate_stock_returns(crsp_stocks)

# Print the output DataFrame
print(stocks_data)

# Read the CSV file into a pandas DataFrame
CRSP_riskless = pd.read_csv('CRSP_riskless.csv', delimiter=',')
CRSP_riskless

print(CRSP_riskless.columns)

# Convert the 'caldt' column to datetime format
CRSP_riskless['caldt'] = pd.to_datetime(CRSP_riskless['caldt'])

# Extract year and month from the 'caldt' column
CRSP_riskless['year'] = CRSP_riskless['caldt'].dt.year
CRSP_riskless['month'] = CRSP_riskless['caldt'].dt.month

# Print the modified DataFrame
print(CRSP_riskless)

# Merge the stocks_data, CRSP_riskless, and Monthly_CRSP_Bonds dataframes
merged_data = pd.merge(stocks_data, CRSP_riskless, left_on=['Year', 'Month'], right_on=['year', 'month'], how='left')
merged_data = pd.merge(merged_data, Monthly_CRSP_Bonds, on=['Year', 'Month'], how='left')

# Calculate Stock_Excess_Vw_Ret (Value-weighted return above riskless rate)
merged_data['Stock_Excess_Vw_Ret'] = merged_data['Stock_Vw_Ret'] - merged_data['t30ret']

# Calculate Bond_Excess_Vw_Ret (Value-weighted return above riskless rate)
merged_data['Bond_Excess_Vw_Ret'] = merged_data['Bond_Vw_Ret'] - merged_data['t30ret']

# Select the required columns for the final dataframe
Monthly_CRSP_Universe = merged_data[['Year', 'Month', 'Stock_lag_MV', 'Stock_Excess_Vw_Ret', 'Bond_lag_MV', 'Bond_Excess_Vw_Ret']]

# Display the output
print(Monthly_CRSP_Universe)

print(Monthly_CRSP_Universe.columns)

"""3"""

import numpy as np

# Calculate the inverse sigma hat for stocks and bonds
stocks_inverse_sigma_hat = 1 / np.sqrt(np.mean(Monthly_CRSP_Universe['Stock_Excess_Vw_Ret'] ** 2))
bonds_inverse_sigma_hat = 1 / np.sqrt(np.mean(Monthly_CRSP_Universe['Bond_Excess_Vw_Ret'] ** 2))

# Calculate the unlevered k for the risk-parity portfolio
unlevered_k = 1 / (stocks_inverse_sigma_hat + bonds_inverse_sigma_hat)

# Calculate the value-weighted portfolio return above the riskless rate
Monthly_CRSP_Universe['Excess_Vw_Ret'] = Monthly_CRSP_Universe['Stock_Excess_Vw_Ret'] + Monthly_CRSP_Universe['Bond_Excess_Vw_Ret']

# Calculate the 60-40 portfolio return above the riskless rate
Monthly_CRSP_Universe['Excess_60_40_Ret'] = 0.6 * Monthly_CRSP_Universe['Stock_Excess_Vw_Ret'] + 0.4 * Monthly_CRSP_Universe['Bond_Excess_Vw_Ret']

# Calculate the unlevered risk-parity portfolio return above the riskless rate
Monthly_CRSP_Universe['Excess_Unlevered_RP_Ret'] = unlevered_k * (
    stocks_inverse_sigma_hat * Monthly_CRSP_Universe['Stock_Excess_Vw_Ret'] +
    bonds_inverse_sigma_hat * Monthly_CRSP_Universe['Bond_Excess_Vw_Ret']
)

# Calculate the levered k to match the sigma hat of Excess_Vw_Ret
levered_k = 1 / np.sqrt(np.mean(Monthly_CRSP_Universe['Excess_Vw_Ret'] ** 2))

# Calculate the levered risk-parity portfolio return above the riskless rate
Monthly_CRSP_Universe['Excess_Levered_RP_Ret'] = levered_k * (
    stocks_inverse_sigma_hat * Monthly_CRSP_Universe['Stock_Excess_Vw_Ret'] +
    bonds_inverse_sigma_hat * Monthly_CRSP_Universe['Bond_Excess_Vw_Ret']
)

# Select the required columns for the final dataframe
Port_Rets = Monthly_CRSP_Universe[[
    'Year', 'Month', 'Stock_Excess_Vw_Ret', 'Bond_Excess_Vw_Ret', 'Excess_Vw_Ret', 'Excess_60_40_Ret',
    'Excess_Unlevered_RP_Ret', 'Excess_Levered_RP_Ret'
]]

# Display the output
print(Port_Rets)

"""4"""

Port_Rets = Port_Rets[(Port_Rets['Year'] >= 1930) & (Port_Rets['Year'] <= 2010) & (Port_Rets['Month'] <= 6)]

from scipy.stats import t, skew, kurtosis

def PS2_Q4(Port_Rets):

    # Calculate the annualized statistics
    num_periods = len(Port_Rets)
    ann_factor = 12  # Monthly data, so 12 periods in a year
    
    # Calculate the annualized mean excess return
    ann_mean_excess_ret = Port_Rets.mean() * ann_factor
    
    # Calculate the t-statistic of the annualized mean excess return
    t_stat = (Port_Rets.mean() / Port_Rets.std()) * np.sqrt(num_periods)
    
    # Calculate the annualized standard deviation
    ann_std_dev = Port_Rets.std() * np.sqrt(ann_factor)
    
    # Calculate the annualized Sharpe Ratio
    ann_sharpe_ratio = ann_mean_excess_ret / ann_std_dev
    
    # Calculate the skewness
    skewness = Port_Rets.skew()
    
    # Calculate the excess kurtosis
    excess_kurtosis = Port_Rets.kurtosis() - 3
    
    # Create a DataFrame to store the results
    table = pd.DataFrame(index=Port_Rets.columns, columns=[
        'Annualized Mean', 't-stat of Annualized Mean', 'Annualized Standard Deviation',
        'Annualized Sharpe Ratio', 'Skewness', 'Excess Kurtosis'
    ])
    
    # Fill in the table with the calculated statistics
    table['Annualized Mean'] = ann_mean_excess_ret
    table['t-stat of Annualized Mean'] = t_stat
    table['Annualized Standard Deviation'] = ann_std_dev
    table['Annualized Sharpe Ratio'] = ann_sharpe_ratio
    table['Skewness'] = skewness
    table['Excess Kurtosis'] = excess_kurtosis
    
    table = table.drop(['Year', 'Month'], axis=0)  # Drop the 'Year' and 'Month' rows


    # Set the index names
    table.index.name = 'Strategy'
    
    return table

# Call the PS2_Q4 function
table = PS2_Q4(Port_Rets)

# View the table
print(table)



